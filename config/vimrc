" Basics {
set nocompatible        " Must be first line
" }

" Windows Compatible {
" On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
" across (heterogeneous) systems easier.
if has('win32') || has('win64')
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

  " Be nice and check for multi_byte even if the config requires
  " multi_byte support most of the time
  if has("multi_byte")
    " Windows cmd.exe still uses cp850. If Windows ever moved to
    " Powershell as the primary terminal, this would be utf-8
    set termencoding=cp850
    " Let Vim use utf-8 internally, because many scripts require this
    set encoding=utf-8
    setglobal fileencoding=utf-8
    " Windows has traditionally used cp1252, so it's probably wise to
    " fallback into cp1252 instead of eg. iso-8859-15.
    " Newer Windows files might contain utf-8 or utf-16 LE so we might
    " want to try them first.
    set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15,chines
set guifont=Consolas:h12
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决consle输出乱码
language messages zh_CN.utf-8
  endif
endif
" }

call plug#begin('$HOME/.vim/plugged')
let mapleader = ','
let g:mapleader = ','
" Make sure you use single quotes
Plug 'junegunn/vim-easy-align'
" Plugin options
Plug 'nsf/gocode', { 'rtp': 'vim' }

Plug 'AutoComplPop'
"浏览树
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"浏览树显示git状态插件
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'Tagbar'
"Bundle 'minibufexpl.vim'

"zencoding 改名为了 Emmet
Plug 'https://github.com/luofei614/Emmet.vim'

Plug 'L9'

Plug 'FuzzyFinder'
"快速浏览文件，FuzzyFinder 也能快速浏览文件， 但是如果项目文件多会很慢
"如果系统升级可以需要运行 gem update --system, do中的命令可能需要手动运行 
"Plug 'Command-T',{'do': 'cd ./ruby/command-t/; ruby extconf.rb ; make','on':'CommandT'} 


" Plugin outside ~/.vim/plugged with post-update hook
" 下面这个插件可取代Command-T 但是现在暂时不支持目录忽略，所以先暂时不用
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'WebAPI.vim'

Plug 'Gist.vim'

Plug 'tomasr/molokai'
"七年没更新的配色能用个鬼
"Plug 'altercation/solarized'
"Plug 'altercation/vim-colors-solarized'
"Plug 'Solarized'
"找来个支持truecolor的
Plug 'lifepillar/vim-solarized8'

Plug 'PDV--phpDocumentor-for-Vim'

Plug 'https://github.com/luofei614/html5css3.git'

"bookmark  mm 添加书签,  mn 移动书签  mp 移动到前一个书签  ma 删除所有书签
Plug 'MattesGroeger/vim-bookmarks'


"Bundle 'JavaScript-syntax'
Plug 'pangloss/vim-javascript'

" jquery , angularjs 等语法
Plug 'https://github.com/othree/javascript-libraries-syntax.vim.git'


Plug 'Mark'
"css私有前缀
Plug 'prefixer.vim'
"能缩减HTML代码
Plug 'xml.vim'
"安装此插件解决macvim下没有加号寄存器的问题。
Plug 'https://github.com/kana/vim-fakeclip.git'

Plug 'terryma/vim-multiple-cursors'

"snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'https://github.com/bonsaiben/bootstrap-snippets.git'

Plug 'phpunit'

"快速跳转到字符
Plug 'EasyMotion'

Plug 'https://github.com/bling/vim-airline.git'

Plug 'https://github.com/burnettk/vim-angular.git'

"检查程序语法错误
"Plug 'https://github.com/scrooloose/syntastic.git'
"切换到 ale
Plug 'w0rp/ale'
"jsx插件
Plug 'mxw/vim-jsx'
"括号改变
"Plug 'surround.vim'
"css color
Plug 'ap/vim-css-color'
" {}
Plug 'jiangmiao/auto-pairs'
"</>
"Plug 'docunext/closetag.vim'
Plug 'alvan/vim-closetag'
"highlight tag
"Plug 'gregsexton/matchtag'
"beauty
Plug 'vim-scripts/matchit.zip'
"tern js 补全
"Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
"Go 插件
Plug 'fatih/vim-go' , { 'do': ':GoInstallBinaries' }
"git 插件
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
"上面的比起下面的更美观且快捷
"Plug 'airblade/vim-gitgutter'
"增强了搜索，需要映射键位
Plug 'haya14busa/incsearch.vim'
"v模式下选词 +键扩展 -键缩减
Plug 'terryma/vim-expand-region'

Plug 'liuchengxu/space-vim-dark'
Plug 'basilgood/Apprentice/'
call plug#end()


"vimgrep查询时排除composer的vendor目录,排除前端bower和node的包文件目录,CommandT也不会查到他们
set wildignore=vendor/**,bower_components/**,node_modules/**


let g:used_javascript_libs = 'jQuery,AngularJS,AngularUI,RequireJS'

"let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
"php只做语法检查
"let g:syntastic_php_checkers = ['php']

"autocomplpop 设置

let g:AutoComplPop_IgnoreCaseOption=1

set ignorecase

let g:acp_behaviorKeywordCommand="\<C-n>"

"设置NERDTreetagbar的宽度

let g:NERDTreeWinSize = 20
let g:tagbar_width=20

"颜色主题设置

"set t_Co=256

"let g:solarized_termcolors=16
"两种流行风格的主题
"colorscheme molokai
"let g:rehash256 = 1
set background=dark
" Allow to trigger background 
  function! ToggleBG() 
    let s:tbg = &background 
    " Inversion 
    if s:tbg == "dark" 
      set background=light 
    else 
      set background=dark 
    endif 
  endfunction 
"设置终端真彩色
"set termguicolors
"旧cmd兼容性待定
let g:solarized_use16 = 1
"colorscheme solarized8
colorscheme apprentice
"high low normal
"let g:solarized_visibility='high'
"high low normal bold
"let g:solarized_diffmode='bold'
"老版光标
"let g:solarized_old_cursor_style=1
map cbg :call ToggleBG()<CR>
"colorscheme space-vim-dark

"emmet 设置

let g:user_emmet_expandabbr_key = '<C-Y>'
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {"lang":"zh-cn"}

"Gist设置

let g:gist_detect_filetype = 1

let g:gist_clip_command = 'xclip -selection clipboard'
"javascript
let b:javascript_fold=1
let javascript_enable_domhtmlcss=1

"php函数自动提示

autocmd FileType php set complete+=k | set dictionary=$HOME/.vim/extend/phpclist.txt

"javascript自动提示，包括了jquery
autocmd FileType javascript set dictionary=$HOME/.vim/extend/javascript.dict
autocmd FileType html set dictionary=$HOME/.vim/extend/html.dict

"查找手册

autocmd FileType php set keywordprg=$HOME/.vim/extend/phpman

autocmd FileType javascript,html set keywordprg=$HOME/.vim/extend/man

autocmd FileType css set keywordprg=$HOME/.vim/extend/cssman

"php的注释，没什么用还占了我的c-d
"inoremap <C-D> <ESC>:call PhpDocSingle()<CR>i 
"nnoremap <C-D> :call PhpDocSingle()<CR> 
"vnoremap <C-D> :call PhpDocRange()<CR> 

map <F2> <S-K><CR>

map! <F2> <C-O><S-K><CR>


map <F6> :! tab vim<CR><CR>
map! <F6> <Esc>:! tab vim<CR><CR>

"删除不剪切, rd

"nnoremap r "_d
"noremap r "_d

"快速生成tag文件

map <F3> :! ctags -R<CR>

map! <F3> <Esc>:! ctags -R<CR>

"快捷键设置

map <F3> :NERDTreeToggle<CR>

map! <F3> <Esc>:NERDTreeToggle<CR>

map <F12> :TagbarToggle<CR>

map! <F12> <Esc>:TagbarToggle<CR>

"快速查找文件

"map <C-P> :CommandT<CR>
"map! <C-P> <Esc>:w<CR>:CommandT<CR>

"文件新tab页打开, CommandT插件配置
let g:CommandTAcceptSelectionMap = '<space>'
let g:CommandTAcceptSelectionTabMap = '<CR>'

" 用FZF 查找文件 
" 设置查找时排除的目录
":let $FZF_DEFAULT_COMMAND  = 'find . -type f ! -path "./node_modules/*" ! -path "./bower_components/*" ! -path "./.git/*" ! -path "*.swp"'
"map <C-P> :tabnew<CR>:FZF<CR>
"map!<C-P> <ESc>:w<CR> :tabnew<CR>:FZF<CR>



"快速对齐
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

"快速查找文函数

map <C-F> :FufTag<CR>

map! <C-F> <Esc>:w<CR>:FufTag<CR>

"快速关闭

map <S-Q> :qa<CR>

nnoremap <c-]> g<c-]>

vnoremap <c-]> g<c-]>

"映射复制、粘贴、剪贴ctrl+c ctrl+v ctrl+x

"还原了C-V的多行编辑模式
map <C-V> "+pa<Esc>

map! <C-V> <Esc>"+pa

map <C-C> "+y

map <C-X> "+x
"多行光标键位解绑
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'



" 映射全选 ctrl+a
"map <C-A> ggVG
"map! <C-A> <Esc>ggVG
"多窗口切换
map <C-H> <C-W><C-H>
map <C-J> <C-W><C-J>
map <C-K> <C-W><C-K>
map <C-L> <C-W><C-L>
" import emacs map
imap <C-A> <HOME>
imap <C-E> <END>
cmap <C-A> <HOME>
cmap <C-E> <END>
nmap <C-A> <HOME>
nmap <C-E> <END>
"imap <C-A> <ESC>^i
"imap <C-E> <ESC>$a
"imap <C-K> <ESC>d$i
"map <C-A> ^
"map <C-E> $
"map <C-K> d$
" git Command git使用
nnoremap gca :Gcommit -a -v<CR>
nnoremap gp  :Gpush <CR>
"ctrl+s为保存
map <C-S> :w<CR>
inoremap <C-S> <C-O>:w<CR>

"ctrl+z撤销

map <C-Z> :u<CR>

map! <C-Z> <C-O>:u<CR>

"双击时高亮

map <2-leftmouse> \m
inoremap <2-leftmouse> <Esc>\m

"ctrl+鼠标左键跳转

"--------------------
" Function: Open tag under cursor in new tab
" Source:   http://stackoverflow.com/questions/563616/vimctags-tips-and-tricks
"--------------------
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"--------------------
" Function: Remap keys to make it more similar to firefox tab functionality
" Purpose:  Because I am familiar with firefox tab functionality
" 切换tab页 用gt
"--------------------
map     <C-T>       :tabnew<CR>

map <A-LeftMouse> <C-]>

map! <A-LeftMouse> <Esc><C-]>



function! InsertTabWrapper()

  let col=col('.')-1

  if !col || getline('.')[col-1] !~ '\k'

    return "\<TAB>"

  else

    return "\<C-x>\<C-o>"

  endif

endfunction

"按tab键，全能提示，

"注意要用inoremap，不能用map！，如果用map！在命令模式下tab键没有提示功能。

inoremap <TAB> <C-R>=InsertTabWrapper()<CR>
"shift+tab 展开代码片段
imap <S-TAB> <Plug>snipMateNextOrTrigger

"在mac下iterm终端标题中中显示文件名称
autocmd BufEnter *.* exe 'silent ! echo -ne "\033];%:t\007"'

"支持鼠标

set mouse=a


" 多行缩进

vnoremap <Tab> >

vnoremap <S-Tab> <

"语法高亮
syntax enable
syntax on
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
"加快速度
"set synmaxcol=200
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems
"删除键
set backspace=eol,start,indent

"基本设置

set encoding=utf-8

set fileencoding=utf-8

set fileencodings=ucs-bom,utf-8,chinese

set ambiwidth=double

set wrap "自动换行

"设置无备份

set nobackup

set nowritebackup

"vim-closetag 
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.js"
"十字线高亮
set cursorcolumn          " highlight current column
set cursorline            " highlight current line

"设置jsx插件对js也解析
let g:jsx_ext_required = 0

" 代码折叠
set foldenable
"set foldmarker={,}
" 缩进折叠
set foldmethod=indent
" 语法折叠
"set foldmethod=syntax
"标记折叠
"set foldmethod=marker
" 折叠栏 太丑了我都瞎了
"set foldcolumn=4
set foldlevel=99
"退出后不清空
"set t_ti= t_te=
set relativenumber " show relative line number
set ruler          " show the current line number and column number
set scrolloff=9    " Set  lines to the cursor - when moving vertically using j/k"
"代码提示 配合scrooloose/syntastic
"npm i -g eslint eslint-config-airbnb babel-eslint eslint-plugin-react
"eslint-plugin-react-native

"
"快捷提交
nmap <leader>p <Plug>(Gpush)
"F5 刷新编辑器
nmap <F5> :source% <CR> 

autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>r <Plug>(go-run)

"状态栏改变
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_exec = 'eslint_d'
"let g:syntastic_error_symbol='✘'
"let g:syntastic_warning_symbol='❗'
"let g:syntastic_style_error_symbol='»'
"let g:syntastic_style_warning_symbol='•'
"let g:syntastic_enable_highlighting = 0
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"显示
let g:airline#extensions#ale#enabled = 1
"自动完成
let g:ale_completion_enabled = 1
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
"自动纠正
let g:ale_fix_on_save = 1
"保持打开栏目
let g:ale_sign_column_always = 1
"--------------------------------------------------
"incsearch
"--------------------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
"搜索后自动关闭高亮
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" ----------------------------------------------------------------------------
" tern_for_vim
" ----------------------------------------------------------------------------
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript setlocal omnifunc=tern#Complete
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
